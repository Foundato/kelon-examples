apiVersion: v1
kind: ConfigMap
metadata:
  name: call-operands
  namespace: kelon
data:
  postgres.yml: |
    call-operands:

      # Mathematical operands
      - op: plus
        args: 2
        mapping: "$0 + $1"
      - op: minus
        args: 2
        mapping: "$0 - $1"
      - op: mul
        args: 2
        mapping: "$1 * $0"
      - op: div
        args: 2
        mapping: "$0 / $1"
      - op: rem
        args: 2
        mapping: "$0 % $1"

      # Relational operands
      - op: eq
        args: 2
        mapping: "$0 = $1"
      - op: equal
        args: 2
        mapping: "$0 = $1"
      - op: neq
        args: 2
        mapping: "$0 != $1"
      - op: lt
        args: 2
        mapping: "$0 < $1"
      - op: gt
        args: 2
        mapping: "$0 > $1"
      - op: lte
        args: 2
        mapping: "$0 <= $1"
      - op: gte
        args: 2
        mapping: "$0 >= $1"

      # Mathematical Functions
      - op: abs
        args: 1
        mapping: "ABS($0)"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kelon-configs
  namespace: kelon
data:
  api.yml: |
    apis:
      - datastore: pg
        mappings:
          # Security for web-app access
          - path: .*
            package: web
          # Security for all APIs (as Fallback)
          - path: /api.*
            package: api
          # Security for apps
          - path: /api/apps.*
            package: applications
          - path: /api/users/\d+/apps/\d+
            package: applications
  datastore.yml: |-
    # Datastores to connect to
    datastores:
      pg:
        type: postgres
        connection:
          host: postgres-postgresql.appstore.svc.cluster.local
          port: 5432
          database: appstore
          user: You
          password: SuperSecure

    # Entity-Schemas define the structure of the entities of one schema inside a datastore
    entity_schemas:
      pg:
        appstore:
          entities:
            - name: app
            - name: app_comments
            - name: app_ratings
            - name: app_screenshots
            - name: app_tags
            - name: comment
            - name: feedback
            - name: logo
            - name: rating
            - name: screenshot
            - name: tag
            - name: users
  opa.yml: |-
    labels:
      app: Kelon
      region: europe-west3
      environment: development

    decision_logs:
      console: true
      reporting:
        min_delay_seconds: 300
        max_delay_seconds: 600

    default_decision: /http/authz/allow
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kelon-policies
  namespace: kelon
data:
  global.rego: |
    package global

    allow = false

    # swa_student is always allowed
    allow {
        hasToken
        token.payload.sub == "swa_student"
    }

    hasToken {
        count(input.token) > 7
    }

    # Helper to get the token payload.
    token = {"payload": payload} {
      [_, payload, _] := io.jwt.decode(input.token)
    }
  api.rego: |-
    package api

    import data.global

    # Inherit from global
    allow = global.allow

    allow {
      input.method == "POST"
      input.path = ["api", "login"]
    }

    allow {
      input.method == "OPTIONS"
      input.path = ["api", "login"]
    }
  web.rego: |-
    package web

    # Everybody can access the webapp
    allow = true
  applications.rego: |-
    package applications

    import data.global
    import input.method

    # Inherit from global
    allow = global.allow

    # Get all apps is always allowed
    allow {
      input.method == "GET"
      input.path = ["api", "apps"]
    }

    # Get details about an app is always allowed
    allow {
      input.method == "GET"
      input.path = ["api", "apps", _]
    }

    # Get comments of an app is always allowed
    allow {
      input.method == "GET"
      input.path = ["api", "apps", _, "comments"]
    }

    # Get app logo is allways allowed
    allow {
      input.method == "GET"
      input.path = ["api", "apps", _, "logo"]
    }

    # Path: GET /api/apps/:app_id
    # Only user can view his apps
    allow {
        some user, app, userId, appId

        input.method == "PUT"
        input.path = ["api", "users", userId, "apps", appId]

        global.hasToken
        data.pg.users[user].name = global.token.payload.sub
        data.pg.app[app].user_id = user.id
        app.id = appId
        user.id = userId
    }
